@isTest
public class WellnessJourneyRewardsBatchTest {
	@testSetup
    static void setup() {
        //criando primeiro usuário conforme a documentação pede
        User testUser1 = new User(
            FirstName = 'Test',
            lastName = 'User1',
            Email = 'testuse4354647r1@example.com',
            Username = 'testuser323231@example.com',
            Alias = 'tuser1',            
            TimeZoneSidKey = 'America/Los_Angeles',
            LocaleSidKey = 'en_US',
            EmailEncodingKey = 'UTF-8',
            ProfileId = [SELECT Id FROM Profile WHERE Name='Standard User' LIMIT 1].Id,            
            LanguageLocaleKey = 'en_US'        
        );
        insert testUser1;
        
        User testUser2 = new User(
            //criando segundo usuário conforme a documentação pede
            FirstName = 'Test',
            LastName = 'User2',
            Email = 'testuse232425r2@example.com',
            Username = 'testuser232323232@example.com',
            Alias = 'tuser2',
            TimeZoneSidKey = 'America/Los_Angeles',
            LocaleSidKey = 'en_US',
            EmailEncodingKey = 'UTF-8',
            ProfileId = [SELECT Id FROM Profile WHERE Name='Standard User' LIMIT 1].Id,
            LanguageLocaleKey = 'en_US'
        );
        insert testUser2;
        
        //criando um objeto do tipo Welljourney_Journey__c para inserção dos dados do usuário
        List<Wellness_Journey__c> journeys = new List<Wellness_Journey__c>();
        for (Integer i = 0; i < 13; i++){
            journeys.add(new Wellness_Journey__c(
            	Name = 'Journey ' + i,
                OwnerId = testUser1.Id,
                Status__c = 'Complete',
                Completion_Date__c = Date.today().addDays(-90)
            ));
        }            
            for (Integer i = 0; i < 5; i++){
                journeys.add(new Wellness_Journey__c(
                	Name = 'Journey ' + (13 + i),
                    OwnerId = testUser2.Id,
                    Status__c = 'Complete',
                    Completion_Date__c = Date.today().addDays(-90)
                ));
            }
            
            insert journeys;
        }
        
	@isTest
        static void testWellnessJourneyRewardBatch(){
            //Define a classe mock para as informações http
            Test.setMock(HttpCalloutMock.class, new RewardsCalloutServiceMock());
            
            //roda teste do batch, inserção
            Test.startTest();
            WellnessJourneyRewardsBatch batch = new WellnessJourneyRewardsBatch();
            Database.executeBatch(batch);                                     
            Test.stopTest();
            //Verifica se rodou certo e compara
            List<Wellness_Journey__c> processedJourneys = [SELECT Id FROM Wellness_Journey__c WHERE Status__c = 'Complete'];
            System.assertEquals(18, processedJourneys.size());
        }
	
    }
